function lexer(e){var r=[];var t=0;while(t<e.length){var n=e[t];if("*"!==n&&"+"!==n&&"?"!==n)if("\\"!==n)if("{"!==n)if("}"!==n)if(":"!==n)if("("!==n)r.push({type:"CHAR",index:t,value:e[t++]});else{var a=1;var i="";c=t+1;if("?"===e[c])throw new TypeError('Pattern cannot start with "?" at '.concat(c));while(c<e.length)if("\\"!==e[c]){if(")"===e[c]){a--;if(0===a){c++;break}}else if("("===e[c]){a++;if("?"!==e[c+1])throw new TypeError("Capturing groups are not allowed at ".concat(c))}i+=e[c++]}else i+=e[c++]+e[c++];if(a)throw new TypeError("Unbalanced pattern at ".concat(t));if(!i)throw new TypeError("Missing pattern at ".concat(t));r.push({type:"PATTERN",index:t,value:i});t=c}else{var o="";var c=t+1;while(c<e.length){var f=e.charCodeAt(c);if(!(f>=48&&f<=57||f>=65&&f<=90||f>=97&&f<=122||95===f))break;o+=e[c++]}if(!o)throw new TypeError("Missing parameter name at ".concat(t));r.push({type:"NAME",index:t,value:o});t=c}else r.push({type:"CLOSE",index:t,value:e[t++]});else r.push({type:"OPEN",index:t,value:e[t++]});else r.push({type:"ESCAPED_CHAR",index:t++,value:e[t++]});else r.push({type:"MODIFIER",index:t,value:e[t++]})}r.push({type:"END",index:t,value:""});return r}function parse(e,r){void 0===r&&(r={});var t=lexer(e);var n=r.prefixes,a=void 0===n?"./":n;var i="[^".concat(escapeString(r.delimiter||"/#?"),"]+?");var o=[];var c=0;var f=0;var p="";var tryConsume=function(e){if(f<t.length&&t[f].type===e)return t[f++].value};var mustConsume=function(e){var r=tryConsume(e);if(void 0!==r)return r;var n=t[f],a=n.type,i=n.index;throw new TypeError("Unexpected ".concat(a," at ").concat(i,", expected ").concat(e))};var consumeText=function(){var e="";var r;while(r=tryConsume("CHAR")||tryConsume("ESCAPED_CHAR"))e+=r;return e};while(f<t.length){var u=tryConsume("CHAR");var v=tryConsume("NAME");var s=tryConsume("PATTERN");if(v||s){var d=u||"";if(-1===a.indexOf(d)){p+=d;d=""}if(p){o.push(p);p=""}o.push({name:v||c++,prefix:d,suffix:"",pattern:s||i,modifier:tryConsume("MODIFIER")||""})}else{var l=u||tryConsume("ESCAPED_CHAR");if(l)p+=l;else{if(p){o.push(p);p=""}var x=tryConsume("OPEN");if(x){d=consumeText();var g=tryConsume("NAME")||"";var h=tryConsume("PATTERN")||"";var m=consumeText();mustConsume("CLOSE");o.push({name:g||(h?c++:""),pattern:g&&!h?i:h,prefix:d,suffix:m,modifier:tryConsume("MODIFIER")||""})}else mustConsume("END")}}}return o}function compile(e,r){return tokensToFunction(parse(e,r),r)}function tokensToFunction(e,r){void 0===r&&(r={});var t=flags(r);var n=r.encode,a=void 0===n?function(e){return e}:n,i=r.validate,o=void 0===i||i;var c=e.map((function(e){if("object"===typeof e)return new RegExp("^(?:".concat(e.pattern,")$"),t)}));return function(r){var t="";for(var n=0;n<e.length;n++){var i=e[n];if("string"!==typeof i){var f=r?r[i.name]:void 0;var p="?"===i.modifier||"*"===i.modifier;var u="*"===i.modifier||"+"===i.modifier;if(Array.isArray(f)){if(!u)throw new TypeError('Expected "'.concat(i.name,'" to not repeat, but got an array'));if(0===f.length){if(p)continue;throw new TypeError('Expected "'.concat(i.name,'" to not be empty'))}for(var v=0;v<f.length;v++){var s=a(f[v],i);if(o&&!c[n].test(s))throw new TypeError('Expected all "'.concat(i.name,'" to match "').concat(i.pattern,'", but got "').concat(s,'"'));t+=i.prefix+s+i.suffix}}else if("string"!==typeof f&&"number"!==typeof f){if(!p){var d=u?"an array":"a string";throw new TypeError('Expected "'.concat(i.name,'" to be ').concat(d))}}else{s=a(String(f),i);if(o&&!c[n].test(s))throw new TypeError('Expected "'.concat(i.name,'" to match "').concat(i.pattern,'", but got "').concat(s,'"'));t+=i.prefix+s+i.suffix}}else t+=i}return t}}function match(e,r){var t=[];var n=pathToRegexp(e,t,r);return regexpToFunction(n,t,r)}function regexpToFunction(e,r,t){void 0===t&&(t={});var n=t.decode,a=void 0===n?function(e){return e}:n;return function(t){var n=e.exec(t);if(!n)return false;var i=n[0],o=n.index;var c=Object.create(null);var _loop_1=function(e){if(void 0===n[e])return"continue";var t=r[e-1];"*"===t.modifier||"+"===t.modifier?c[t.name]=n[e].split(t.prefix+t.suffix).map((function(e){return a(e,t)})):c[t.name]=a(n[e],t)};for(var f=1;f<n.length;f++)_loop_1(f);return{path:i,index:o,params:c}}}function escapeString(e){return e.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1")}function flags(e){return e&&e.sensitive?"":"i"}function regexpToRegexp(e,r){if(!r)return e;var t=/\((?:\?<(.*?)>)?(?!\?)/g;var n=0;var a=t.exec(e.source);while(a){r.push({name:a[1]||n++,prefix:"",suffix:"",modifier:"",pattern:""});a=t.exec(e.source)}return e}function arrayToRegexp(e,r,t){var n=e.map((function(e){return pathToRegexp(e,r,t).source}));return new RegExp("(?:".concat(n.join("|"),")"),flags(t))}function stringToRegexp(e,r,t){return tokensToRegexp(parse(e,t),r,t)}function tokensToRegexp(e,r,t){void 0===t&&(t={});var n=t.strict,a=void 0!==n&&n,i=t.start,o=void 0===i||i,c=t.end,f=void 0===c||c,p=t.encode,u=void 0===p?function(e){return e}:p,v=t.delimiter,s=void 0===v?"/#?":v,d=t.endsWith,l=void 0===d?"":d;var x="[".concat(escapeString(l),"]|$");var g="[".concat(escapeString(s),"]");var h=o?"^":"";for(var m=0,E=e;m<E.length;m++){var y=E[m];if("string"===typeof y)h+=escapeString(u(y));else{var T=escapeString(u(y.prefix));var w=escapeString(u(y.suffix));if(y.pattern){r&&r.push(y);if(T||w)if("+"===y.modifier||"*"===y.modifier){var R="*"===y.modifier?"?":"";h+="(?:".concat(T,"((?:").concat(y.pattern,")(?:").concat(w).concat(T,"(?:").concat(y.pattern,"))*)").concat(w,")").concat(R)}else h+="(?:".concat(T,"(").concat(y.pattern,")").concat(w,")").concat(y.modifier);else"+"===y.modifier||"*"===y.modifier?h+="((?:".concat(y.pattern,")").concat(y.modifier,")"):h+="(".concat(y.pattern,")").concat(y.modifier)}else h+="(?:".concat(T).concat(w,")").concat(y.modifier)}}if(f){a||(h+="".concat(g,"?"));h+=t.endsWith?"(?=".concat(x,")"):"$"}else{var A=e[e.length-1];var C="string"===typeof A?g.indexOf(A[A.length-1])>-1:void 0===A;a||(h+="(?:".concat(g,"(?=").concat(x,"))?"));C||(h+="(?=".concat(g,"|").concat(x,")"))}return new RegExp(h,flags(t))}function pathToRegexp(e,r,t){return e instanceof RegExp?regexpToRegexp(e,r):Array.isArray(e)?arrayToRegexp(e,r,t):stringToRegexp(e,r,t)}export{compile,match,parse,pathToRegexp,regexpToFunction,tokensToFunction,tokensToRegexp};

